/** Generated by YAKINDU Statechart Tools code generator. */
package hu.bme.mit.yakindu.analysis.example;

import hu.bme.mit.yakindu.analysis.ITimer;

public class ExampleStatemachine implements IExampleStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private boolean start;
		
		public void raiseStart() {
			start = true;
		}
		
		private boolean elsoJon;
		
		public void raiseElsoJon() {
			elsoJon = true;
		}
		
		private boolean masodikJon;
		
		public void raiseMasodikJon() {
			masodikJon = true;
		}
		
		private long elsoJataekosIdeje;
		
		public long getElsoJataekosIdeje() {
			return elsoJataekosIdeje;
		}
		
		public void setElsoJataekosIdeje(long value) {
			this.elsoJataekosIdeje = value;
		}
		
		private long masoikJataekosIdeje;
		
		public long getMasoikJataekosIdeje() {
			return masoikJataekosIdeje;
		}
		
		public void setMasoikJataekosIdeje(long value) {
			this.masoikJataekosIdeje = value;
		}
		
		protected void clearEvents() {
			start = false;
			elsoJon = false;
			masodikJon = false;
		}
	}
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Init,
		main_region_masodikJatekos,
		main_region_elsoJatekos,
		$NullState$
	};
	
	private final State[] stateVector = new State[1];
	
	private int nextStateIndex;
	
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[2];
	public ExampleStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 1; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setElsoJataekosIdeje(60);
		
		sCInterface.setMasoikJataekosIdeje(60);
	}
	
	public void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Init:
				main_region_Init_react(true);
				break;
			case main_region_masodikJatekos:
				main_region_masodikJatekos_react(true);
				break;
			case main_region_elsoJatekos:
				main_region_elsoJatekos_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public boolean isActive() {
		return stateVector[0] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Init:
			return stateVector[0] == State.main_region_Init;
		case main_region_masodikJatekos:
			return stateVector[0] == State.main_region_masodikJatekos;
		case main_region_elsoJatekos:
			return stateVector[0] == State.main_region_elsoJatekos;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public void raiseStart() {
		sCInterface.raiseStart();
	}
	
	public void raiseElsoJon() {
		sCInterface.raiseElsoJon();
	}
	
	public void raiseMasodikJon() {
		sCInterface.raiseMasodikJon();
	}
	
	public long getElsoJataekosIdeje() {
		return sCInterface.getElsoJataekosIdeje();
	}
	
	public void setElsoJataekosIdeje(long value) {
		sCInterface.setElsoJataekosIdeje(value);
	}
	
	public long getMasoikJataekosIdeje() {
		return sCInterface.getMasoikJataekosIdeje();
	}
	
	public void setMasoikJataekosIdeje(long value) {
		sCInterface.setMasoikJataekosIdeje(value);
	}
	
	/* Entry action for state 'masodikJatekos'. */
	private void entryAction_main_region_masodikJatekos() {
		timer.setTimer(this, 0, (1 * 1000), false);
	}
	
	/* Entry action for state 'elsoJatekos'. */
	private void entryAction_main_region_elsoJatekos() {
		timer.setTimer(this, 1, (1 * 1000), false);
	}
	
	/* Exit action for state 'masodikJatekos'. */
	private void exitAction_main_region_masodikJatekos() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'elsoJatekos'. */
	private void exitAction_main_region_elsoJatekos() {
		timer.unsetTimer(this, 1);
	}
	
	/* 'default' enter sequence for state Init */
	private void enterSequence_main_region_Init_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Init;
	}
	
	/* 'default' enter sequence for state masodikJatekos */
	private void enterSequence_main_region_masodikJatekos_default() {
		entryAction_main_region_masodikJatekos();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_masodikJatekos;
	}
	
	/* 'default' enter sequence for state elsoJatekos */
	private void enterSequence_main_region_elsoJatekos_default() {
		entryAction_main_region_elsoJatekos();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_elsoJatekos;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* Default exit sequence for state Init */
	private void exitSequence_main_region_Init() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state masodikJatekos */
	private void exitSequence_main_region_masodikJatekos() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_masodikJatekos();
	}
	
	/* Default exit sequence for state elsoJatekos */
	private void exitSequence_main_region_elsoJatekos() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_elsoJatekos();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Init:
			exitSequence_main_region_Init();
			break;
		case main_region_masodikJatekos:
			exitSequence_main_region_masodikJatekos();
			break;
		case main_region_elsoJatekos:
			exitSequence_main_region_elsoJatekos();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Init_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Init_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.start) {
					exitSequence_main_region_Init();
					enterSequence_main_region_elsoJatekos_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_masodikJatekos_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.elsoJon) {
					exitSequence_main_region_masodikJatekos();
					enterSequence_main_region_elsoJatekos_default();
				} else {
					if (timeEvents[0]) {
						exitSequence_main_region_masodikJatekos();
						sCInterface.setMasoikJataekosIdeje(sCInterface.getMasoikJataekosIdeje() - 1);
						
						enterSequence_main_region_masodikJatekos_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_elsoJatekos_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (react()==false) {
				if (sCInterface.masodikJon) {
					exitSequence_main_region_elsoJatekos();
					enterSequence_main_region_masodikJatekos_default();
				} else {
					if (timeEvents[1]) {
						exitSequence_main_region_elsoJatekos();
						sCInterface.setElsoJataekosIdeje(sCInterface.getElsoJataekosIdeje() - 1);
						
						enterSequence_main_region_elsoJatekos_default();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
}
